---

name: build and deploy
on:
  release:
    types:
      - created
  push:
    tags-ignore:
      - '**'
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [13.x]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Set env to DEV
        if: github.repository_owner != 'ProteGO-Safe'
            && startsWith(github.ref, 'refs/heads/release/')
            && github.event_name == 'push'
        run: |
          echo "::set-env name=ENVIRONMENT::DEV"

      - name: Set env to STAGE
        if: startsWith(github.ref, 'refs/tags/')
            && github.repository_owner != 'ProteGO-Safe'
            && startsWith( github.event.release.target_commitish, 'release' )
            && github.event_name == 'release'
        run: |
          echo "::set-env name=ENVIRONMENT::STAGE"

      - name: Set env to PROD
        if: startsWith(github.ref, 'refs/tags/')
            && github.repository_owner == 'ProteGO-Safe'
            && ( github.event.release.target_commitish == 'master' || startsWith( github.event.release.target_commitish, 'release/3' ))
            && github.event_name == 'release'
        run: |
          echo "::set-env name=ENVIRONMENT::PROD"

      - name: Set Env's
        run: echo "::set-env name=PROJECT_ENVS::${{ secrets[env.EV] }}"
        env:
          EV: "${{ env.ENVIRONMENT }}_ENV"
        if: env.ENVIRONMENT == 'STAGE' || env.ENVIRONMENT == 'PROD' || env.ENVIRONMENT == 'DEV'

      - name: Inject ENV's for builds
        run: 'echo "$PROJECT_ENVS" |base64 --decode > .env'
        shell: bash
        if: env.ENVIRONMENT == 'STAGE' || env.ENVIRONMENT == 'PROD' || env.ENVIRONMENT == 'DEV'

      - name: Show GITHUB_CONTEXT
        run: |
          echo "$GITHUB_CONTEXT"
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        if: env.ENVIRONMENT != 'PROD'

      - run: yarn audit --groups dependencies
      - run: yarn install
      - run: yarn build
      - run: cp firebase.json build/
        if: ( env.ENVIRONMENT == 'STAGE' || env.ENVIRONMENT == 'PROD' || env.ENVIRONMENT == 'DEV' )

      - name: Archive Artifact
        if: ( env.ENVIRONMENT == 'STAGE' || env.ENVIRONMENT == 'PROD' || env.ENVIRONMENT == 'DEV' )
        uses: actions/upload-artifact@master
        with:
          name: build
          path: build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags') || startsWith(github.ref, 'refs/heads/release/') }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Set env to DEV
        if: github.repository_owner != 'ProteGO-Safe'
            && startsWith(github.ref, 'refs/heads/release/')
            && github.event_name == 'push'
        run: |
          echo "::set-env name=ENVIRONMENT::DEV"

      - name: Set env to STAGE
        if: startsWith(github.ref, 'refs/tags/')
            &&  github.repository_owner != 'ProteGO-Safe'
            && startsWith( github.event.release.target_commitish, 'release' )
            && github.event_name == 'release'
        run: |
          echo "::set-env name=ENVIRONMENT::STAGE"

      - name: Set env to PROD
        if: startsWith(github.ref, 'refs/tags/')
            && github.repository_owner == 'ProteGO-Safe'
            && ( github.event.release.target_commitish == 'master' || startsWith( github.event.release.target_commitish, 'release/3' ))
            && github.event_name == 'release'
        run: |
          echo "::set-env name=ENVIRONMENT::PROD"

      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: build
          path: build

      - name: Set Env's from Git refs.
        run: |
          echo "::set-env name=SOURCE_NAME::${GITHUB_REF#refs/*/}"
          echo "::set-env name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}"
          echo "::set-env name=SOURCE_TAG::${GITHUB_REF#refs/tags/}"
          echo "::set-env name=GCP_SA_KEY::${{ secrets[env.SECRET_ENV] }}"
          echo "::set-env name=SECRET_PROJECT::${{ secrets[env.PROJECT_ENV] }}"
          echo "::set-env name=SITE_PROJECT::${{ secrets[env.SITE_ENV] }}"
        env:
          SECRET_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_HOSTING_SAFE"
          PROJECT_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_PROJECT"
          SITE_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_SITE"
        if: env.ENVIRONMENT == 'STAGE' || env.ENVIRONMENT == 'PROD' || env.ENVIRONMENT == 'DEV'

      - name: Set SITE_PROJECT for V4 PROD
        run: |
          echo "::set-env name=SITE_PROJECT::${{ secrets[env.SITE_ENV] }}-v4"
        env:
          SITE_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_SITE"
        if: ( env.ENVIRONMENT == 'PROD' && github.event.release.target_commitish == 'master' )

      - name: Set SITE_PROJECT for V3 in PROD
        run: |
          echo "::set-env name=SITE_PROJECT::${{ secrets[env.SITE_ENV] }}"
        env:
          SITE_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_SITE"
        if: ( env.ENVIRONMENT == 'PROD' && startsWith( github.event.release.target_commitish, 'release/3' ) )

      - name: Sed Firebase.json
        run: sed -ie 's|site_to_sed|${{ env.SITE_PROJECT }}|g' firebase.json
        if: ( env.ENVIRONMENT == 'STAGE' || env.ENVIRONMENT == 'PROD' || env.ENVIRONMENT == 'DEV' )

      - name: Deploy to Firebase
        if: ( env.ENVIRONMENT == 'STAGE' || env.ENVIRONMENT == 'PROD' || env.ENVIRONMENT == 'DEV' )
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only hosting --project $SECRET_PROJECT
